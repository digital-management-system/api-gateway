type Query {
  user: User
}

type User implements Node {
  id: ID!
  email: ID!
  manufacturer(id: ID!): Manufacturer
  manufacturers(after: String, first: Int, before: String, last: Int, ids: [ID!], name: String, sortingOptions: [SortingOptionPair!]): ManufacturersConnection
  registeredUser(email: String!): RegisteredUser
  registeredUsers(after: String, first: Int, before: String, last: Int, emails: [String!], sortingOptions: [SortingOptionPair!]): RegisteredUsersConnection
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Manufacturer implements Node {
  id: ID!
  name: String!
  user: RegisteredUser!
  department(id: ID!): Department
  departments(after: String, first: Int, before: String, last: Int, ids: [ID!], name: String, description: String, sortingOptions: [SortingOptionPair!]): DepartmentsConnection
  employee(id: ID!): Employee
  employees(after: String, first: Int, before: String, last: Int, ids: [ID!], employeeReference: String, position: String, mobile: String, userId: ID, reportingToEmployeeId: ID, sortingOptions: [SortingOptionPair!]): EmployeesConnection
  msop(id: ID!): MSOP
  msops(after: String, first: Int, before: String, last: Int, ids: [ID!], meetingName: String, durationId: ID, frequencyId: ID, meetingDayId: ID, departmentId: ID, chairPersonEmployeeId: ID, actionLogSecretaryEmployeeId: ID, attendeeId: ID, sortingOptions: [SortingOptionPair!]): MSOPsConnection
  actionPointPriority(id: ID!): ActionPointPriority
  actionPointPriorities(after: String, first: Int, before: String, last: Int, ids: [ID!], name: String, sortingOptions: [SortingOptionPair!]): ActionPointPrioritiesConnection
  actionPointReference(id: ID!): ActionPointReference
  actionPointReferences(after: String, first: Int, before: String, last: Int, ids: [ID!], name: String, sortingOptions: [SortingOptionPair!]): ActionPointReferencesConnection
  actionPointStatus(id: ID!): ActionPointStatus
  actionPointStatuses(after: String, first: Int, before: String, last: Int, ids: [ID!], name: String, sortingOptions: [SortingOptionPair!]): ActionPointStatusesConnection
  actionPoint(id: ID!): ActionPoint
  actionPoints(after: String, first: Int, before: String, last: Int, ids: [ID!], msopId: ID, assigneeId: ID, departmentId: ID, assignedDate: String, dueDate: String, priorityId: ID, statusId: ID, referenceId: ID, sortingOptions: [SortingOptionPair!]): ActionPointsConnection
  meetingDay(id: ID!): MeetingDay
  meetingDays(after: String, first: Int, before: String, last: Int, ids: [ID!], name: String, sortingOptions: [SortingOptionPair!]): MeetingDaysConnection
  meetingDuration(id: ID!): MeetingDuration
  meetingDurations(after: String, first: Int, before: String, last: Int, ids: [ID!], name: String, sortingOptions: [SortingOptionPair!]): MeetingDurationsConnection
  meetingFrequency(id: ID!): MeetingFrequency
  meetingFrequencies(after: String, first: Int, before: String, last: Int, ids: [ID!], name: String, sortingOptions: [SortingOptionPair!]): MeetingFrequenciesConnection
}

type RegisteredUser implements Node {
  id: ID!
  email: String!
}

type Department implements Node {
  id: ID!
  name: String!
  description: String
  manufacturer: Department_ManufacturerProperties!
  employee(id: ID!): DepartmentTypeResolver_EmployeeProperties
  employees(after: String, first: Int, before: String, last: Int, ids: [ID!], employeeReference: String, position: String, mobile: String, userId: ID, reportingToEmployeeId: ID, sortingOptions: [SortingOptionPair!]): DepartmentTypeResolver_Connection_EmployeePropertiesConnection
  msops(after: String, first: Int, before: String, last: Int, ids: [ID!], meetingName: String, durationId: ID, frequencyId: ID, meetingDayId: ID, chairPersonEmployeeId: ID, actionLogSecretaryEmployeeId: ID, attendeeId: ID, sortingOptions: [SortingOptionPair!]): MSOPsPropertiesConnection
  actionPoints(after: String, first: Int, before: String, last: Int, ids: [ID!], assigneeId: ID, msopId: ID, assignedDate: String, dueDate: String, priorityId: ID, statusId: ID, referenceId: ID, sortingOptions: [SortingOptionPair!]): ActionPointsPropertiesConnection
}

type Department_ManufacturerProperties implements Node {
  id: ID!
  name: String!
}

type DepartmentTypeResolver_EmployeeProperties implements Node {
  id: ID!
  employeeReference: String
  position: String
  mobile: String
  user: Employee_RegisteredUserProperties!
  manufacturer: Employee_ManufacturerProperties!
  departments: [Employee_DepartmentProperties]!
  actionPoints(after: String, first: Int, before: String, last: Int, ids: [ID!], departmentId: ID, msopId: ID, assignedDate: String, dueDate: String, priorityId: ID, statusId: ID, referenceId: ID, sortingOptions: [SortingOptionPair!]): ActionPointsPropertiesConnection
  reportingToEmployee: DepartmentTypeResolver_EmployeeProperties_ReportingEmployeeProperties
}

type Employee_RegisteredUserProperties implements Node {
  id: ID!
  email: String!
}

type Employee_ManufacturerProperties implements Node {
  id: ID!
  name: String!
}

type Employee_DepartmentProperties implements Node {
  id: ID!
  name: String!
  description: String
}

"""A connection to a list of items."""
type ActionPointsPropertiesConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ActionPointsPropertiesEdge]

  """Total number of action points"""
  totalCount: Int
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type ActionPointsPropertiesEdge {
  """The item at the end of the edge"""
  node: ActionPointProperties

  """A cursor for use in pagination"""
  cursor: String!
}

type ActionPointProperties implements Node {
  id: ID!
  assignedDate: String!
  dueDate: String
  comments: String
  manufacturer: ActionPoint_ManufacturerProperties!
}

type ActionPoint_ManufacturerProperties implements Node {
  id: ID!
  name: String!
}

input SortingOptionPair {
  name: String!
  direction: SortingDirection!
}

enum SortingDirection {
  Ascending
  Descending
}

type DepartmentTypeResolver_EmployeeProperties_ReportingEmployeeProperties implements Node {
  id: ID!
  employeeReference: String
  position: String
  mobile: String
  user: Employee_RegisteredUserProperties!
  manufacturer: Employee_ManufacturerProperties!
  departments: [Employee_DepartmentProperties]!
  actionPoints(after: String, first: Int, before: String, last: Int, ids: [ID!], departmentId: ID, msopId: ID, assignedDate: String, dueDate: String, priorityId: ID, statusId: ID, referenceId: ID, sortingOptions: [SortingOptionPair!]): ActionPointsPropertiesConnection
}

"""A connection to a list of items."""
type DepartmentTypeResolver_Connection_EmployeePropertiesConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DepartmentTypeResolver_Connection_EmployeePropertiesEdge]

  """Total number of employees"""
  totalCount: Int
}

"""An edge in a connection."""
type DepartmentTypeResolver_Connection_EmployeePropertiesEdge {
  """The item at the end of the edge"""
  node: Connection_EmployeeProperties

  """A cursor for use in pagination"""
  cursor: String!
}

type Connection_EmployeeProperties implements Node {
  id: ID!
  employeeReference: String
  position: String
  mobile: String
  user: Employee_RegisteredUserProperties!
  manufacturer: Employee_ManufacturerProperties!
  departments: [Employee_DepartmentProperties]!
  actionPoints(after: String, first: Int, before: String, last: Int, ids: [ID!], departmentId: ID, msopId: ID, assignedDate: String, dueDate: String, priorityId: ID, statusId: ID, referenceId: ID, sortingOptions: [SortingOptionPair!]): ActionPointsPropertiesConnection
  reportingToEmployee: Connection_EmployeeProperties_ReportingEmployeeProperties
}

type Connection_EmployeeProperties_ReportingEmployeeProperties implements Node {
  id: ID!
  employeeReference: String
  position: String
  mobile: String
  user: Employee_RegisteredUserProperties!
  manufacturer: Employee_ManufacturerProperties!
  departments: [Employee_DepartmentProperties]!
  actionPoints(after: String, first: Int, before: String, last: Int, ids: [ID!], departmentId: ID, msopId: ID, assignedDate: String, dueDate: String, priorityId: ID, statusId: ID, referenceId: ID, sortingOptions: [SortingOptionPair!]): ActionPointsPropertiesConnection
}

"""A connection to a list of items."""
type MSOPsPropertiesConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MSOPsPropertiesEdge]

  """Total number of MSOPs"""
  totalCount: Int
}

"""An edge in a connection."""
type MSOPsPropertiesEdge {
  """The item at the end of the edge"""
  node: MSOPProperties

  """A cursor for use in pagination"""
  cursor: String!
}

type MSOPProperties implements Node {
  id: ID!
  meetingName: String!
  agendas: String
  manufacturer: MSOP_ManufacturerProperties!
}

type MSOP_ManufacturerProperties implements Node {
  id: ID!
  name: String!
}

"""A connection to a list of items."""
type DepartmentsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DepartmentsEdge]

  """Total number of departments"""
  totalCount: Int
}

"""An edge in a connection."""
type DepartmentsEdge {
  """The item at the end of the edge"""
  node: Department

  """A cursor for use in pagination"""
  cursor: String!
}

type Employee implements Node {
  id: ID!
  employeeReference: String
  position: String
  mobile: String
  user: Employee_RegisteredUserProperties!
  manufacturer: Employee_ManufacturerProperties!
  departments: [Employee_DepartmentProperties]!
  actionPoints(after: String, first: Int, before: String, last: Int, ids: [ID!], departmentId: ID, msopId: ID, assignedDate: String, dueDate: String, priorityId: ID, statusId: ID, referenceId: ID, sortingOptions: [SortingOptionPair!]): ActionPointsPropertiesConnection
  reportingToEmployee: EmployeeTypeResolver_ReportingEmployeeProperties
}

type EmployeeTypeResolver_ReportingEmployeeProperties implements Node {
  id: ID!
  employeeReference: String
  position: String
  mobile: String
  user: Employee_RegisteredUserProperties!
  manufacturer: Employee_ManufacturerProperties!
  departments: [Employee_DepartmentProperties]!
  actionPoints(after: String, first: Int, before: String, last: Int, ids: [ID!], departmentId: ID, msopId: ID, assignedDate: String, dueDate: String, priorityId: ID, statusId: ID, referenceId: ID, sortingOptions: [SortingOptionPair!]): ActionPointsPropertiesConnection
}

"""A connection to a list of items."""
type EmployeesConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EmployeesEdge]

  """Total number of employees"""
  totalCount: Int
}

"""An edge in a connection."""
type EmployeesEdge {
  """The item at the end of the edge"""
  node: Employee

  """A cursor for use in pagination"""
  cursor: String!
}

type MSOP implements Node {
  id: ID!
  meetingName: String!
  agendas: String
  manufacturer: MSOP_ManufacturerProperties!
  duration: MeetingDurationProperties!
  frequency: MeetingFrequencyProperties!
  meetingDays: [MeetingDayProperties]!
  department: DepartmentProperties!
  chairPersonEmployee: MSOPTypeResolver_EmployeeProperties!
  actionLogSecretaryEmployee: MSOPTypeResolver_EmployeeProperties!
  attendees: [MSOPTypeResolver_EmployeeProperties!]!
  actionPoints(after: String, first: Int, before: String, last: Int, ids: [ID!], assigneeId: ID, departmentId: ID, assignedDate: String, dueDate: String, priorityId: ID, statusId: ID, referenceId: ID, sortingOptions: [SortingOptionPair!]): ActionPointsPropertiesConnection
}

type MeetingDurationProperties implements Node {
  id: ID!
  name: String!
  manufacturer: MeetingDuration_ManufacturerProperties!
}

type MeetingDuration_ManufacturerProperties implements Node {
  id: ID!
  name: String!
}

type MeetingFrequencyProperties implements Node {
  id: ID!
  name: String!
  manufacturer: MeetingFrequency_ManufacturerProperties!
}

type MeetingFrequency_ManufacturerProperties implements Node {
  id: ID!
  name: String!
}

type MeetingDayProperties implements Node {
  id: ID!
  name: String!
  manufacturer: MeetingDay_ManufacturerProperties!
}

type MeetingDay_ManufacturerProperties implements Node {
  id: ID!
  name: String!
}

type DepartmentProperties implements Node {
  id: ID!
  name: String!
  description: String
  manufacturer: Department_ManufacturerProperties!
}

type MSOPTypeResolver_EmployeeProperties implements Node {
  id: ID!
  employeeReference: String
  position: String
  mobile: String
  user: Employee_RegisteredUserProperties!
  manufacturer: Employee_ManufacturerProperties!
  departments: [Employee_DepartmentProperties]!
  actionPoints(after: String, first: Int, before: String, last: Int, ids: [ID!], departmentId: ID, msopId: ID, assignedDate: String, dueDate: String, priorityId: ID, statusId: ID, referenceId: ID, sortingOptions: [SortingOptionPair!]): ActionPointsPropertiesConnection
  reportingToEmployee: MSOPTypeResolver_EmployeeProperties_ReportingEmployeeProperties
}

type MSOPTypeResolver_EmployeeProperties_ReportingEmployeeProperties implements Node {
  id: ID!
  employeeReference: String
  position: String
  mobile: String
  user: Employee_RegisteredUserProperties!
  manufacturer: Employee_ManufacturerProperties!
  departments: [Employee_DepartmentProperties]!
  actionPoints(after: String, first: Int, before: String, last: Int, ids: [ID!], departmentId: ID, msopId: ID, assignedDate: String, dueDate: String, priorityId: ID, statusId: ID, referenceId: ID, sortingOptions: [SortingOptionPair!]): ActionPointsPropertiesConnection
}

"""A connection to a list of items."""
type MSOPsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MSOPsEdge]

  """Total number of MSOPs"""
  totalCount: Int
}

"""An edge in a connection."""
type MSOPsEdge {
  """The item at the end of the edge"""
  node: MSOP

  """A cursor for use in pagination"""
  cursor: String!
}

type ActionPointPriority implements Node {
  id: ID!
  name: String!
  manufacturer: ActionPointPriority_ManufacturerProperties!
}

type ActionPointPriority_ManufacturerProperties implements Node {
  id: ID!
  name: String!
}

"""A connection to a list of items."""
type ActionPointPrioritiesConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ActionPointPrioritiesEdge]

  """Total number of action point priorities"""
  totalCount: Int
}

"""An edge in a connection."""
type ActionPointPrioritiesEdge {
  """The item at the end of the edge"""
  node: ActionPointPriority

  """A cursor for use in pagination"""
  cursor: String!
}

type ActionPointReference implements Node {
  id: ID!
  name: String!
  manufacturer: ActionPointReference_ManufacturerProperties!
}

type ActionPointReference_ManufacturerProperties implements Node {
  id: ID!
  name: String!
}

"""A connection to a list of items."""
type ActionPointReferencesConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ActionPointReferencesEdge]

  """Total number of action point references"""
  totalCount: Int
}

"""An edge in a connection."""
type ActionPointReferencesEdge {
  """The item at the end of the edge"""
  node: ActionPointReference

  """A cursor for use in pagination"""
  cursor: String!
}

type ActionPointStatus implements Node {
  id: ID!
  name: String!
  manufacturer: ActionPointStatus_ManufacturerProperties!
}

type ActionPointStatus_ManufacturerProperties implements Node {
  id: ID!
  name: String!
}

"""A connection to a list of items."""
type ActionPointStatusesConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ActionPointStatusesEdge]

  """Total number of action point statuses"""
  totalCount: Int
}

"""An edge in a connection."""
type ActionPointStatusesEdge {
  """The item at the end of the edge"""
  node: ActionPointStatus

  """A cursor for use in pagination"""
  cursor: String!
}

type ActionPoint implements Node {
  id: ID!
  assignedDate: String!
  dueDate: String
  comments: String
  manufacturer: ActionPoint_ManufacturerProperties!
  msop: MSOP
  assignee: ActionPointTypeResolver_EmployeeProperties
  department: DepartmentProperties!
  priority: ActionPointPriorityProperties
  status: ActionPointStatusProperties
  references: [ActionPointReferenceProperties]!
}

type ActionPointTypeResolver_EmployeeProperties implements Node {
  id: ID!
  employeeReference: String
  position: String
  mobile: String
  user: Employee_RegisteredUserProperties!
  manufacturer: Employee_ManufacturerProperties!
  departments: [Employee_DepartmentProperties]!
  actionPoints(after: String, first: Int, before: String, last: Int, ids: [ID!], departmentId: ID, msopId: ID, assignedDate: String, dueDate: String, priorityId: ID, statusId: ID, referenceId: ID, sortingOptions: [SortingOptionPair!]): ActionPointsPropertiesConnection
  reportingToEmployee: ActionPointTypeResolver_EmployeeProperties_ReportingEmployeeProperties
}

type ActionPointTypeResolver_EmployeeProperties_ReportingEmployeeProperties implements Node {
  id: ID!
  employeeReference: String
  position: String
  mobile: String
  user: Employee_RegisteredUserProperties!
  manufacturer: Employee_ManufacturerProperties!
  departments: [Employee_DepartmentProperties]!
  actionPoints(after: String, first: Int, before: String, last: Int, ids: [ID!], departmentId: ID, msopId: ID, assignedDate: String, dueDate: String, priorityId: ID, statusId: ID, referenceId: ID, sortingOptions: [SortingOptionPair!]): ActionPointsPropertiesConnection
}

type ActionPointPriorityProperties implements Node {
  id: ID!
  name: String!
  manufacturer: ActionPointPriority_ManufacturerProperties!
}

type ActionPointStatusProperties implements Node {
  id: ID!
  name: String!
  manufacturer: ActionPointStatus_ManufacturerProperties!
}

type ActionPointReferenceProperties implements Node {
  id: ID!
  name: String!
  manufacturer: ActionPointReference_ManufacturerProperties!
}

"""A connection to a list of items."""
type ActionPointsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ActionPointsEdge]

  """Total number of action points"""
  totalCount: Int
}

"""An edge in a connection."""
type ActionPointsEdge {
  """The item at the end of the edge"""
  node: ActionPoint

  """A cursor for use in pagination"""
  cursor: String!
}

type MeetingDay implements Node {
  id: ID!
  name: String!
  manufacturer: MeetingDay_ManufacturerProperties!
}

"""A connection to a list of items."""
type MeetingDaysConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MeetingDaysEdge]

  """Total number of meeting days"""
  totalCount: Int
}

"""An edge in a connection."""
type MeetingDaysEdge {
  """The item at the end of the edge"""
  node: MeetingDay

  """A cursor for use in pagination"""
  cursor: String!
}

type MeetingDuration implements Node {
  id: ID!
  name: String!
  manufacturer: MeetingDuration_ManufacturerProperties!
}

"""A connection to a list of items."""
type MeetingDurationsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MeetingDurationsEdge]

  """Total number of meeting durations"""
  totalCount: Int
}

"""An edge in a connection."""
type MeetingDurationsEdge {
  """The item at the end of the edge"""
  node: MeetingDuration

  """A cursor for use in pagination"""
  cursor: String!
}

type MeetingFrequency implements Node {
  id: ID!
  name: String!
  manufacturer: MeetingFrequency_ManufacturerProperties!
}

"""A connection to a list of items."""
type MeetingFrequenciesConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MeetingFrequenciesEdge]

  """Total number of meeting frequencies"""
  totalCount: Int
}

"""An edge in a connection."""
type MeetingFrequenciesEdge {
  """The item at the end of the edge"""
  node: MeetingFrequency

  """A cursor for use in pagination"""
  cursor: String!
}

"""A connection to a list of items."""
type ManufacturersConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ManufacturersEdge]

  """Total number of manufacturers"""
  totalCount: Int
}

"""An edge in a connection."""
type ManufacturersEdge {
  """The item at the end of the edge"""
  node: Manufacturer

  """A cursor for use in pagination"""
  cursor: String!
}

"""A connection to a list of items."""
type RegisteredUsersConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RegisteredUsersEdge]

  """Total number of registered users"""
  totalCount: Int
}

"""An edge in a connection."""
type RegisteredUsersEdge {
  """The item at the end of the edge"""
  node: RegisteredUser

  """A cursor for use in pagination"""
  cursor: String!
}

type Mutation {
  createManufacturer(input: CreateManufacturerInput!): CreateManufacturerPayload
  updateManufacturer(input: UpdateManufacturerInput!): UpdateManufacturerPayload
  deleteManufacturer(input: DeleteManufacturerInput!): DeleteManufacturerPayload
  createDepartment(input: CreateDepartmentInput!): CreateDepartmentPayload
  updateDepartment(input: UpdateDepartmentInput!): UpdateDepartmentPayload
  deleteDepartment(input: DeleteDepartmentInput!): DeleteDepartmentPayload
  createEmployee(input: CreateEmployeeInput!): CreateEmployeePayload
  updateEmployee(input: UpdateEmployeeInput!): UpdateEmployeePayload
  deleteEmployee(input: DeleteEmployeeInput!): DeleteEmployeePayload
  createMSOP(input: CreateMSOPInput!): CreateMSOPPayload
  updateMSOP(input: UpdateMSOPInput!): UpdateMSOPPayload
  deleteMSOP(input: DeleteMSOPInput!): DeleteMSOPPayload
  createActionPoint(input: CreateActionPointInput!): CreateActionPointPayload
  updateActionPoint(input: UpdateActionPointInput!): UpdateActionPointPayload
  deleteActionPoint(input: DeleteActionPointInput!): DeleteActionPointPayload
  createActionPointPriority(input: CreateActionPointPriorityInput!): CreateActionPointPriorityPayload
  updateActionPointPriority(input: UpdateActionPointPriorityInput!): UpdateActionPointPriorityPayload
  deleteActionPointPriority(input: DeleteActionPointPriorityInput!): DeleteActionPointPriorityPayload
  createActionPointReference(input: CreateActionPointReferenceInput!): CreateActionPointReferencePayload
  updateActionPointReference(input: UpdateActionPointReferenceInput!): UpdateActionPointReferencePayload
  deleteActionPointReference(input: DeleteActionPointReferenceInput!): DeleteActionPointReferencePayload
  createActionPointStatus(input: CreateActionPointStatusInput!): CreateActionPointStatusPayload
  updateActionPointStatus(input: UpdateActionPointStatusInput!): UpdateActionPointStatusPayload
  deleteActionPointStatus(input: DeleteActionPointStatusInput!): DeleteActionPointStatusPayload
  createMeetingFrequency(input: CreateMeetingFrequencyInput!): CreateMeetingFrequencyPayload
  updateMeetingFrequency(input: UpdateMeetingFrequencyInput!): UpdateMeetingFrequencyPayload
  deleteMeetingFrequency(input: DeleteMeetingFrequencyInput!): DeleteMeetingFrequencyPayload
  createMeetingDay(input: CreateMeetingDayInput!): CreateMeetingDayPayload
  updateMeetingDay(input: UpdateMeetingDayInput!): UpdateMeetingDayPayload
  deleteMeetingDay(input: DeleteMeetingDayInput!): DeleteMeetingDayPayload
  createMeetingDuration(input: CreateMeetingDurationInput!): CreateMeetingDurationPayload
  updateMeetingDuration(input: UpdateMeetingDurationInput!): UpdateMeetingDurationPayload
  deleteMeetingDuration(input: DeleteMeetingDurationInput!): DeleteMeetingDurationPayload
}

type CreateManufacturerPayload {
  manufacturer: ManufacturersEdge
  clientMutationId: String
}

input CreateManufacturerInput {
  name: String!
  clientMutationId: String
}

type UpdateManufacturerPayload {
  manufacturer: ManufacturersEdge
  clientMutationId: String
}

input UpdateManufacturerInput {
  id: ID!
  name: String!
  clientMutationId: String
}

type DeleteManufacturerPayload {
  deletedManufacturerId: ID!
  clientMutationId: String
}

input DeleteManufacturerInput {
  id: ID!
  clientMutationId: String
}

type CreateDepartmentPayload {
  department: DepartmentsEdge
  clientMutationId: String
}

input CreateDepartmentInput {
  name: String!
  description: String
  manufacturerId: ID!
  clientMutationId: String
}

type UpdateDepartmentPayload {
  department: DepartmentsEdge
  clientMutationId: String
}

input UpdateDepartmentInput {
  id: ID!
  name: String!
  description: String
  manufacturerId: ID!
  clientMutationId: String
}

type DeleteDepartmentPayload {
  deletedDepartmentId: ID!
  clientMutationId: String
}

input DeleteDepartmentInput {
  id: ID!
  clientMutationId: String
}

type CreateEmployeePayload {
  employee: EmployeesEdge
  clientMutationId: String
}

input CreateEmployeeInput {
  manufacturerId: ID!
  employeeReference: String
  position: String
  mobile: String
  userId: ID!
  departmentIds: [ID!]!
  reportingToEmployeeId: ID
  clientMutationId: String
}

type UpdateEmployeePayload {
  employee: EmployeesEdge
  clientMutationId: String
}

input UpdateEmployeeInput {
  id: ID!
  manufacturerId: ID!
  employeeReference: String
  position: String
  mobile: String
  userId: ID!
  departmentIds: [ID!]!
  reportingToEmployeeId: ID
  clientMutationId: String
}

type DeleteEmployeePayload {
  deletedEmployeeId: ID!
  clientMutationId: String
}

input DeleteEmployeeInput {
  id: ID!
  clientMutationId: String
}

type CreateMSOPPayload {
  msop: MSOPsEdge
  clientMutationId: String
}

input CreateMSOPInput {
  manufacturerId: ID!
  meetingName: String!
  durationId: ID!
  frequencyId: ID!
  meetingDayIds: [ID!]!
  agendas: String
  departmentId: ID!
  chairPersonEmployeeId: ID!
  actionLogSecretaryEmployeeId: ID!
  attendeeIds: [ID!]!
  clientMutationId: String
}

type UpdateMSOPPayload {
  msop: MSOPsEdge
  clientMutationId: String
}

input UpdateMSOPInput {
  id: ID!
  manufacturerId: ID!
  meetingName: String!
  durationId: ID!
  frequencyId: ID!
  meetingDayIds: [ID!]!
  agendas: String
  departmentId: ID!
  chairPersonEmployeeId: ID!
  actionLogSecretaryEmployeeId: ID!
  attendeeIds: [ID!]!
  clientMutationId: String
}

type DeleteMSOPPayload {
  deletedMSOPId: ID!
  clientMutationId: String
}

input DeleteMSOPInput {
  id: ID!
  clientMutationId: String
}

type CreateActionPointPayload {
  actionPoint: ActionPointsEdge
  clientMutationId: String
}

input CreateActionPointInput {
  manufacturerId: ID!
  msopId: ID!
  assigneeId: ID!
  departmentId: ID!
  assignedDate: String!
  dueDate: String
  priorityId: ID!
  statusId: ID!
  actionReferenceIds: [ID!]!
  comments: String
  clientMutationId: String
}

type UpdateActionPointPayload {
  actionPoint: ActionPointsEdge
  clientMutationId: String
}

input UpdateActionPointInput {
  id: ID!
  manufacturerId: ID!
  msopId: ID!
  assigneeId: ID!
  departmentId: ID!
  assignedDate: String!
  dueDate: String
  priorityId: ID!
  statusId: ID!
  actionReferenceIds: [ID!]!
  comments: String
  clientMutationId: String
}

type DeleteActionPointPayload {
  deletedActionPointId: ID!
  clientMutationId: String
}

input DeleteActionPointInput {
  id: ID!
  clientMutationId: String
}

type CreateActionPointPriorityPayload {
  actionPointPriority: ActionPointPrioritiesEdge
  clientMutationId: String
}

input CreateActionPointPriorityInput {
  manufacturerId: ID!
  name: String!
  clientMutationId: String
}

type UpdateActionPointPriorityPayload {
  actionPointPriority: ActionPointPrioritiesEdge
  clientMutationId: String
}

input UpdateActionPointPriorityInput {
  id: ID!
  manufacturerId: ID!
  name: String!
  clientMutationId: String
}

type DeleteActionPointPriorityPayload {
  deletedActionPointPriorityId: ID!
  clientMutationId: String
}

input DeleteActionPointPriorityInput {
  id: ID!
  clientMutationId: String
}

type CreateActionPointReferencePayload {
  actionPointReference: ActionPointReferencesEdge
  clientMutationId: String
}

input CreateActionPointReferenceInput {
  manufacturerId: ID!
  name: String!
  clientMutationId: String
}

type UpdateActionPointReferencePayload {
  actionPointReference: ActionPointReferencesEdge
  clientMutationId: String
}

input UpdateActionPointReferenceInput {
  id: ID!
  manufacturerId: ID!
  name: String!
  clientMutationId: String
}

type DeleteActionPointReferencePayload {
  deletedActionPointReferenceId: ID!
  clientMutationId: String
}

input DeleteActionPointReferenceInput {
  id: ID!
  clientMutationId: String
}

type CreateActionPointStatusPayload {
  actionPointStatus: ActionPointStatusesEdge
  clientMutationId: String
}

input CreateActionPointStatusInput {
  manufacturerId: ID!
  name: String!
  clientMutationId: String
}

type UpdateActionPointStatusPayload {
  actionPointStatus: ActionPointStatusesEdge
  clientMutationId: String
}

input UpdateActionPointStatusInput {
  id: ID!
  manufacturerId: ID!
  name: String!
  clientMutationId: String
}

type DeleteActionPointStatusPayload {
  deletedActionPointStatusId: ID!
  clientMutationId: String
}

input DeleteActionPointStatusInput {
  id: ID!
  clientMutationId: String
}

type CreateMeetingFrequencyPayload {
  actionPointPriority: ActionPointPrioritiesEdge
  clientMutationId: String
}

input CreateMeetingFrequencyInput {
  manufacturerId: ID!
  name: String!
  clientMutationId: String
}

type UpdateMeetingFrequencyPayload {
  actionPointPriority: ActionPointPrioritiesEdge
  clientMutationId: String
}

input UpdateMeetingFrequencyInput {
  id: ID!
  manufacturerId: ID!
  name: String!
  clientMutationId: String
}

type DeleteMeetingFrequencyPayload {
  deletedMeetingFrequencyId: ID!
  clientMutationId: String
}

input DeleteMeetingFrequencyInput {
  id: ID!
  clientMutationId: String
}

type CreateMeetingDayPayload {
  actionPointPriority: ActionPointPrioritiesEdge
  clientMutationId: String
}

input CreateMeetingDayInput {
  manufacturerId: ID!
  name: String!
  clientMutationId: String
}

type UpdateMeetingDayPayload {
  actionPointPriority: ActionPointPrioritiesEdge
  clientMutationId: String
}

input UpdateMeetingDayInput {
  id: ID!
  manufacturerId: ID!
  name: String!
  clientMutationId: String
}

type DeleteMeetingDayPayload {
  deletedMeetingDayId: ID!
  clientMutationId: String
}

input DeleteMeetingDayInput {
  id: ID!
  clientMutationId: String
}

type CreateMeetingDurationPayload {
  actionPointPriority: ActionPointPrioritiesEdge
  clientMutationId: String
}

input CreateMeetingDurationInput {
  manufacturerId: ID!
  name: String!
  clientMutationId: String
}

type UpdateMeetingDurationPayload {
  actionPointPriority: ActionPointPrioritiesEdge
  clientMutationId: String
}

input UpdateMeetingDurationInput {
  id: ID!
  manufacturerId: ID!
  name: String!
  clientMutationId: String
}

type DeleteMeetingDurationPayload {
  deletedMeetingDurationId: ID!
  clientMutationId: String
}

input DeleteMeetingDurationInput {
  id: ID!
  clientMutationId: String
}
