type Query {
  user: User
}

type User implements Node {
  id: ID!
  department(departmentId: ID!): Department
  departments(after: String, first: Int, before: String, last: Int, departmentIds: [ID!], sortingOptions: [SortingOptionPair!]): DepartmentTypeConnection
  registeredUser(email: String!): RegisteredUser
  registeredUsers(after: String, first: Int, before: String, last: Int, emails: [String!], sortingOptions: [SortingOptionPair!]): RegisteredUserTypeConnection
  employee(employeeId: ID!): Employee
  employees(after: String, first: Int, before: String, last: Int, employeeIds: [ID!], sortingOptions: [SortingOptionPair!]): EmployeeTypeConnection
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Department implements Node {
  id: ID!
  name: String!
  description: String
}

"""A connection to a list of items."""
type DepartmentTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DepartmentTypeEdge]

  """Total number of departments"""
  totalCount: Int
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type DepartmentTypeEdge {
  """The item at the end of the edge"""
  node: Department

  """A cursor for use in pagination"""
  cursor: String!
}

input SortingOptionPair {
  name: String!
  direction: SortingDirection!
}

enum SortingDirection {
  ASCENDING
  DESCENDING
}

type RegisteredUser implements Node {
  id: ID!
  email: String!
  name: Name!
}

type Name {
  firstName: String!
  middleName: String
  lastName: String!
  preferredName: String
}

"""A connection to a list of items."""
type RegisteredUserTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RegisteredUserTypeEdge]

  """Total number of registeredUsers"""
  totalCount: Int
}

"""An edge in a connection."""
type RegisteredUserTypeEdge {
  """The item at the end of the edge"""
  node: RegisteredUser

  """A cursor for use in pagination"""
  cursor: String!
}

type Employee implements Node {
  id: ID!
  email: String!
  departments: [Department]!
}

"""A connection to a list of items."""
type EmployeeTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EmployeeTypeEdge]

  """Total number of employees"""
  totalCount: Int
}

"""An edge in a connection."""
type EmployeeTypeEdge {
  """The item at the end of the edge"""
  node: Employee

  """A cursor for use in pagination"""
  cursor: String!
}

type Mutation {
  createDepartment(input: CreateDepartmentInput!): CreateDepartmentPayload
  updateDepartment(input: UpdateDepartmentInput!): UpdateDepartmentPayload
  deleteDepartment(input: DeleteDepartmentInput!): DeleteDepartmentPayload
  createEmployee(input: CreateEmployeeInput!): CreateEmployeePayload
  updateEmployee(input: UpdateEmployeeInput!): UpdateEmployeePayload
  deleteEmployee(input: DeleteEmployeeInput!): DeleteEmployeePayload
}

type CreateDepartmentPayload {
  department: DepartmentTypeEdge
  clientMutationId: String
}

input CreateDepartmentInput {
  name: String!
  description: String
  clientMutationId: String
}

type UpdateDepartmentPayload {
  department: DepartmentTypeEdge
  clientMutationId: String
}

input UpdateDepartmentInput {
  id: ID!
  name: String!
  description: String
  clientMutationId: String
}

type DeleteDepartmentPayload {
  deletedDepartmentId: ID!
  clientMutationId: String
}

input DeleteDepartmentInput {
  id: ID!
  clientMutationId: String
}

type CreateEmployeePayload {
  employee: EmployeeTypeEdge
  clientMutationId: String
}

input CreateEmployeeInput {
  email: String!
  departmentIds: [ID!]
  clientMutationId: String
}

type UpdateEmployeePayload {
  employee: EmployeeTypeEdge
  clientMutationId: String
}

input UpdateEmployeeInput {
  id: ID!
  email: String!
  departmentIds: [ID!]
  clientMutationId: String
}

type DeleteEmployeePayload {
  deletedEmployeeId: ID!
  clientMutationId: String
}

input DeleteEmployeeInput {
  id: ID!
  clientMutationId: String
}
