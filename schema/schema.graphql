type Query {
  user: User
}

type User implements Node {
  id: ID!
  email: ID!
  manufacturer(manufacturerId: ID!): Manufacturer
  manufacturers(after: String, first: Int, before: String, last: Int, manufacturerIds: [ID!], sortingOptions: [SortingOptionPair!]): ManufacturerTypeConnection
  registeredUser(email: String!): RegisteredUser
  registeredUsers(after: String, first: Int, before: String, last: Int, emails: [String!], sortingOptions: [SortingOptionPair!]): RegisteredUserTypeConnection
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Manufacturer implements Node {
  id: ID!
  name: String!
  user: RegisteredUser!
  department(departmentId: ID!): Department
  departments(after: String, first: Int, before: String, last: Int, departmentIds: [ID!], sortingOptions: [SortingOptionPair!]): DepartmentTypeConnection
  employee(employeeId: ID!): Employee
  employees(after: String, first: Int, before: String, last: Int, employeeIds: [ID!], sortingOptions: [SortingOptionPair!]): EmployeeTypeConnection
  msop(msopId: ID!): MSOP
  msops(after: String, first: Int, before: String, last: Int, msopIds: [ID!], sortingOptions: [SortingOptionPair!]): MSOPTypeConnection
  msopMeetingFrequencies: [MSOPMeetingFrequency]
  msopMeetingDays: [MSOPMeetingDay]
}

type RegisteredUser implements Node {
  id: ID!
  email: String!
}

type Department implements Node {
  id: ID!
  name: String!
  description: String
}

"""A connection to a list of items."""
type DepartmentTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DepartmentTypeEdge]

  """Total number of departments"""
  totalCount: Int
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type DepartmentTypeEdge {
  """The item at the end of the edge"""
  node: Department

  """A cursor for use in pagination"""
  cursor: String!
}

input SortingOptionPair {
  name: String!
  direction: SortingDirection!
}

enum SortingDirection {
  Ascending
  Descending
}

type Employee implements Node {
  id: ID!
  employeeReference: String
  position: String
  mobile: String
  user: RegisteredUser!
  departments: [Department]!
  reportingToEmployee: ReportingEmployee
}

type ReportingEmployee implements Node {
  id: ID!
  employeeReference: String
  position: String
  mobile: String
  user: RegisteredUser!
  departments: [Department]!
}

"""A connection to a list of items."""
type EmployeeTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EmployeeTypeEdge]

  """Total number of employees"""
  totalCount: Int
}

"""An edge in a connection."""
type EmployeeTypeEdge {
  """The item at the end of the edge"""
  node: Employee

  """A cursor for use in pagination"""
  cursor: String!
}

type MSOP implements Node {
  id: ID!
  meetingName: String!
  meetingDuration: String!
  frequency: MSOPMeetingFrequency!
  meetingDays: [MSOPMeetingDay]
  agendas: String
  department: Department!
  chairPersonEmployee: Employee!
  actionLogSecretaryEmployee: Employee!
  attendees: [Employee]!
}

enum MSOPMeetingFrequency {
  Daily
  Weekly
  Monthly
}

enum MSOPMeetingDay {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

"""A connection to a list of items."""
type MSOPTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MSOPTypeEdge]

  """Total number of MSOPs"""
  totalCount: Int
}

"""An edge in a connection."""
type MSOPTypeEdge {
  """The item at the end of the edge"""
  node: MSOP

  """A cursor for use in pagination"""
  cursor: String!
}

"""A connection to a list of items."""
type ManufacturerTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ManufacturerTypeEdge]

  """Total number of manufacturers"""
  totalCount: Int
}

"""An edge in a connection."""
type ManufacturerTypeEdge {
  """The item at the end of the edge"""
  node: Manufacturer

  """A cursor for use in pagination"""
  cursor: String!
}

"""A connection to a list of items."""
type RegisteredUserTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RegisteredUserTypeEdge]

  """Total number of registeredUsers"""
  totalCount: Int
}

"""An edge in a connection."""
type RegisteredUserTypeEdge {
  """The item at the end of the edge"""
  node: RegisteredUser

  """A cursor for use in pagination"""
  cursor: String!
}

type Mutation {
  createManufacturer(input: CreateManufacturerInput!): CreateManufacturerPayload
  updateManufacturer(input: UpdateManufacturerInput!): UpdateManufacturerPayload
  deleteManufacturer(input: DeleteManufacturerInput!): DeleteManufacturerPayload
  createDepartment(input: CreateDepartmentInput!): CreateDepartmentPayload
  updateDepartment(input: UpdateDepartmentInput!): UpdateDepartmentPayload
  deleteDepartment(input: DeleteDepartmentInput!): DeleteDepartmentPayload
  createEmployee(input: CreateEmployeeInput!): CreateEmployeePayload
  updateEmployee(input: UpdateEmployeeInput!): UpdateEmployeePayload
  deleteEmployee(input: DeleteEmployeeInput!): DeleteEmployeePayload
  createMSOP(input: CreateMSOPInput!): CreateMSOPPayload
  updateMSOP(input: UpdateMSOPInput!): UpdateMSOPPayload
  deleteMSOP(input: DeleteMSOPInput!): DeleteMSOPPayload
}

type CreateManufacturerPayload {
  manufacturer: ManufacturerTypeEdge
  clientMutationId: String
}

input CreateManufacturerInput {
  name: String!
  clientMutationId: String
}

type UpdateManufacturerPayload {
  manufacturer: ManufacturerTypeEdge
  clientMutationId: String
}

input UpdateManufacturerInput {
  id: ID!
  name: String!
  clientMutationId: String
}

type DeleteManufacturerPayload {
  deletedManufacturerId: ID!
  clientMutationId: String
}

input DeleteManufacturerInput {
  id: ID!
  clientMutationId: String
}

type CreateDepartmentPayload {
  department: DepartmentTypeEdge
  clientMutationId: String
}

input CreateDepartmentInput {
  name: String!
  description: String
  manufacturerId: ID!
  clientMutationId: String
}

type UpdateDepartmentPayload {
  department: DepartmentTypeEdge
  clientMutationId: String
}

input UpdateDepartmentInput {
  id: ID!
  name: String!
  description: String
  manufacturerId: ID!
  clientMutationId: String
}

type DeleteDepartmentPayload {
  deletedDepartmentId: ID!
  clientMutationId: String
}

input DeleteDepartmentInput {
  id: ID!
  clientMutationId: String
}

type CreateEmployeePayload {
  employee: EmployeeTypeEdge
  clientMutationId: String
}

input CreateEmployeeInput {
  manufacturerId: ID!
  employeeReference: String
  position: String
  mobile: String
  userId: ID!
  departmentIds: [ID!]
  reportingToEmployeeId: ID
  clientMutationId: String
}

type UpdateEmployeePayload {
  employee: EmployeeTypeEdge
  clientMutationId: String
}

input UpdateEmployeeInput {
  id: ID!
  manufacturerId: ID!
  employeeReference: String
  position: String
  mobile: String
  userId: ID!
  departmentIds: [ID!]
  reportingToEmployeeId: ID
  clientMutationId: String
}

type DeleteEmployeePayload {
  deletedEmployeeId: ID!
  clientMutationId: String
}

input DeleteEmployeeInput {
  id: ID!
  clientMutationId: String
}

type CreateMSOPPayload {
  msop: MSOPTypeEdge
  clientMutationId: String
}

input CreateMSOPInput {
  manufacturerId: ID!
  meetingName: String!
  meetingDuration: String!
  frequency: MSOPMeetingFrequency!
  meetingDays: [MSOPMeetingDay!]
  agendas: String
  departmentId: ID!
  chairPersonEmployeeId: ID!
  actionLogSecretaryEmployeeId: ID!
  attendeeIds: [ID!]
  clientMutationId: String
}

type UpdateMSOPPayload {
  msop: MSOPTypeEdge
  clientMutationId: String
}

input UpdateMSOPInput {
  id: ID!
  manufacturerId: ID!
  meetingName: String!
  meetingDuration: String!
  frequency: MSOPMeetingFrequency!
  meetingDays: [MSOPMeetingDay!]
  agendas: String
  departmentId: ID!
  chairPersonEmployeeId: ID!
  actionLogSecretaryEmployeeId: ID!
  attendeeIds: [ID!]
  clientMutationId: String
}

type DeleteMSOPPayload {
  deletedMSOPId: ID!
  clientMutationId: String
}

input DeleteMSOPInput {
  id: ID!
  clientMutationId: String
}
